/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package whitepages.gui;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Formatter;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileSystemView;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.AnnotationConfiguration;
import org.joda.time.DateTime;
import whitepages.dao.PeopleDao;
import whitepages.entity.People;
import whitepages.entity.ProxyData;
import whitepages.crawlers.SearchByFile;
import whitepages.crawlers.SearchByName;
import whitepages.crawlers.StartAllDataCrawler;

/**
 *
 * @author GLB-029
 */
public class WhitepagesGui extends javax.swing.JFrame {

    static SearchByName searchByName;
    static SearchByFile searchByFile;
//    public static List<Thread> threadList = new ArrayList<>();
//    public static volatile boolean running = false;
    static ArrayList<String> nameList = new ArrayList<>();
    static List<String> cityList = new ArrayList<>();
    StartAllDataCrawler startAllDataCrawler;
    SessionFactory factory = new AnnotationConfiguration().
            configure().setProperty("hibernate.connection.url", "jdbc:sqlite:" + System.getProperty("user.home") + "\\appdata\\Whitepages-scraper\\whitepages.db").
            buildSessionFactory();

    /**
     * Creates new form WhitepagesGui
     */
    public static String doGetRequest(URL obj) throws Exception {

        String response = "";
        try {
            HttpURLConnection con = (HttpURLConnection) obj.openConnection();
            con.setRequestMethod("GET");

            if (con.getResponseCode() != 200) {
                return response;
            }

            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
            String inputLine;

            while ((inputLine = in.readLine()) != null) {
                response = response + "\n" + inputLine;
            }
            in.close();
        } catch (Exception ex) {
        }

        return response;
    }

    public WhitepagesGui() {

        URL iconURL = getClass().getResource("w1.jpg");
// iconURL is null when not found
        ImageIcon icon = new ImageIcon(iconURL);
        this.setIconImage(icon.getImage());
        File file = new File(System.getProperty("user.home") + "\\Desktop\\Whitepages-scraper");
        File anotherfile = new File(System.getProperty("user.home") + "\\appdata\\Whitepages-scraper");
        if (!file.exists()) {
            file.mkdir();
        }
        try {
            File proxyFile = new File(System.getProperty("user.home") + "\\Desktop\\Whitepages-scraper\\proxy.txt");
            proxyFile.createNewFile();
        } catch (IOException ex) {
        }
        if (!anotherfile.exists()) {
            anotherfile.mkdir();
        }
        initComponents();
        getContentPane().setBackground(Color.WHITE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonPanel = new javax.swing.JPanel();
        clearLog = new javax.swing.JButton();
        startScrapingButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        deleteDataButton = new javax.swing.JButton();
        showDataButton = new javax.swing.JButton();
        nameFileUploadButton = new javax.swing.JButton();
        cityFileUploadButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        deleteProxyButton = new javax.swing.JButton();
        nameCityPanel = new javax.swing.JPanel();
        nameLabel = new javax.swing.JLabel();
        cityText = new javax.swing.JTextField();
        nameText = new javax.swing.JTextField();
        cityLabel = new javax.swing.JLabel();
        headerImage = new javax.swing.JLabel();
        outputText = new java.awt.TextArea();
        jPanel1 = new javax.swing.JPanel();
        scrapeByNameRadio = new javax.swing.JRadioButton();
        scrapeByFileRadio = new javax.swing.JRadioButton();
        scrapeAllDataRadio = new javax.swing.JRadioButton();
        errorLogText = new java.awt.TextArea();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        proxyRackRadio = new javax.swing.JRadioButton();
        proxyFileRadio = new javax.swing.JRadioButton();
        proxyRackPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        proxyText = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        portText = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        userNameText = new javax.swing.JTextField();
        saveProxyButton = new javax.swing.JButton();
        passwordText = new javax.swing.JPasswordField();
        uploadProxyPanel = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        proxyFileText = new javax.swing.JTextField();
        uploadProxyButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Whitepages Scraper");
        setBackground(new java.awt.Color(255, 255, 255));
        setBounds(new java.awt.Rectangle(150, 200, 550, 500));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        buttonPanel.setBackground(new java.awt.Color(255, 255, 255));
        buttonPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Controls"));

        clearLog.setText("Clear");
        clearLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearLogActionPerformed(evt);
            }
        });

        startScrapingButton.setText("Start");
        startScrapingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startScrapingButtonActionPerformed(evt);
            }
        });

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        deleteDataButton.setText("Delete All Data");
        deleteDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteDataButtonActionPerformed(evt);
            }
        });

        showDataButton.setText("Show All Data");
        showDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showDataButtonActionPerformed(evt);
            }
        });

        nameFileUploadButton.setText("Upload Names");
        nameFileUploadButton.setEnabled(false);
        nameFileUploadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameFileUploadButtonActionPerformed(evt);
            }
        });

        cityFileUploadButton.setText("Upload Cities");
        cityFileUploadButton.setEnabled(false);
        cityFileUploadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cityFileUploadButtonActionPerformed(evt);
            }
        });

        stopButton.setText("Stop");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        deleteProxyButton.setText("Delete All Proxy");
        deleteProxyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteProxyButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buttonPanelLayout = new javax.swing.GroupLayout(buttonPanel);
        buttonPanel.setLayout(buttonPanelLayout);
        buttonPanelLayout.setHorizontalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(startScrapingButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nameFileUploadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cityFileUploadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showDataButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteDataButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteProxyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clearLog)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(stopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exitButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        buttonPanelLayout.setVerticalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(showDataButton)
                    .addComponent(cityFileUploadButton)
                    .addComponent(nameFileUploadButton)
                    .addComponent(startScrapingButton)
                    .addComponent(deleteDataButton)
                    .addComponent(deleteProxyButton)
                    .addComponent(clearLog)
                    .addComponent(stopButton)
                    .addComponent(exitButton))
                .addContainerGap())
        );

        nameCityPanel.setBackground(new java.awt.Color(255, 255, 255));
        nameCityPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Name & City", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(0, 0, 0)));

        nameLabel.setText("Name*");

        cityText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cityTextActionPerformed(evt);
            }
        });

        nameText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameTextActionPerformed(evt);
            }
        });

        cityLabel.setText("City");

        javax.swing.GroupLayout nameCityPanelLayout = new javax.swing.GroupLayout(nameCityPanel);
        nameCityPanel.setLayout(nameCityPanelLayout);
        nameCityPanelLayout.setHorizontalGroup(
            nameCityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(nameCityPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(nameCityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nameLabel)
                    .addComponent(cityLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(nameCityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nameText)
                    .addComponent(cityText))
                .addContainerGap())
        );
        nameCityPanelLayout.setVerticalGroup(
            nameCityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(nameCityPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(nameCityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(nameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(nameCityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cityText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cityLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        headerImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/whitepages/images/download1.png"))); // NOI18N

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Sraping Choices"));

        scrapeByNameRadio.setBackground(new java.awt.Color(255, 255, 255));
        scrapeByNameRadio.setText(" By Name");
        scrapeByNameRadio.setSelected(true);
        scrapeByNameRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scrapeByNameRadioActionPerformed(evt);
            }
        });

        scrapeByFileRadio.setBackground(new java.awt.Color(255, 255, 255));
        scrapeByFileRadio.setText(" By File");
        scrapeByFileRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scrapeByFileRadioActionPerformed(evt);
            }
        });

        scrapeAllDataRadio.setBackground(new java.awt.Color(255, 255, 255));
        scrapeAllDataRadio.setText(" All Data");
        scrapeAllDataRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scrapeAllDataRadioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrapeByNameRadio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrapeByFileRadio)
                .addGap(2, 2, 2)
                .addComponent(scrapeAllDataRadio, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(scrapeByNameRadio)
                .addComponent(scrapeByFileRadio)
                .addComponent(scrapeAllDataRadio))
        );

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setText("Error Log");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setText("Output");

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Proxy Option"));

        proxyRackRadio.setBackground(new java.awt.Color(255, 255, 255));
        proxyRackRadio.setSelected(true);
        proxyRackRadio.setText("Use Proxy Rack");
        proxyRackRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proxyRackRadioActionPerformed(evt);
            }
        });

        proxyFileRadio.setBackground(new java.awt.Color(255, 255, 255));
        proxyFileRadio.setText("Use File Data");
        proxyFileRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proxyFileRadioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(proxyRackRadio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(proxyFileRadio)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(proxyRackRadio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(proxyFileRadio))
        );

        proxyRackPanel.setBackground(new java.awt.Color(255, 255, 255));
        proxyRackPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Proxy Rack"));
        proxyRackPanel.setForeground(new java.awt.Color(153, 153, 153));

        jLabel2.setText("Proxy*");

        jLabel3.setText("Port*");

        jLabel1.setText("User Name*");

        jLabel4.setText("Password*");

        saveProxyButton.setText("Save");
        saveProxyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveProxyButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout proxyRackPanelLayout = new javax.swing.GroupLayout(proxyRackPanel);
        proxyRackPanel.setLayout(proxyRackPanelLayout);
        proxyRackPanelLayout.setHorizontalGroup(
            proxyRackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(proxyRackPanelLayout.createSequentialGroup()
                .addGroup(proxyRackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(proxyRackPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(proxyRackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(proxyRackPanelLayout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(jLabel3)
                                .addGap(10, 10, 10)
                                .addComponent(portText, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel4))
                            .addGroup(proxyRackPanelLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(proxyText, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel1))))
                    .addGroup(proxyRackPanelLayout.createSequentialGroup()
                        .addGap(121, 121, 121)
                        .addComponent(saveProxyButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(proxyRackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(userNameText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                    .addComponent(passwordText)))
        );
        proxyRackPanelLayout.setVerticalGroup(
            proxyRackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(proxyRackPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(proxyRackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(proxyText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(userNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(proxyRackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(proxyRackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(portText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(passwordText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveProxyButton))
        );

        uploadProxyPanel.setBackground(new java.awt.Color(255, 255, 255));
        uploadProxyPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Proxy File"));
        uploadProxyPanel.setForeground(new java.awt.Color(153, 153, 153));

        jLabel7.setText("File Name");

        proxyFileText.setEditable(false);
        proxyFileText.setEnabled(false);
        proxyFileText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proxyFileTextActionPerformed(evt);
            }
        });

        uploadProxyButton.setText("Upload Proxy File");
        uploadProxyButton.setEnabled(false);
        uploadProxyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadProxyButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout uploadProxyPanelLayout = new javax.swing.GroupLayout(uploadProxyPanel);
        uploadProxyPanel.setLayout(uploadProxyPanelLayout);
        uploadProxyPanelLayout.setHorizontalGroup(
            uploadProxyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(uploadProxyPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(uploadProxyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(uploadProxyButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(uploadProxyPanelLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(proxyFileText))
                .addContainerGap())
        );
        uploadProxyPanelLayout.setVerticalGroup(
            uploadProxyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, uploadProxyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(proxyFileText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(uploadProxyButton)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 802, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(outputText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(errorLogText, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(nameCityPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(headerImage)
                                .addGap(0, 4, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(proxyRackPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(uploadProxyPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(headerImage))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(uploadProxyPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(proxyRackPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nameCityPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(outputText, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
                    .addComponent(errorLogText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startScrapingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startScrapingButtonActionPerformed
        //to scrape data using name and city field with proxy rack

        if (scrapeByNameRadio.isSelected()) {
            if (proxyRackRadio.isSelected()) {
                ExecutorService executor = Executors.newFixedThreadPool(1);
                try {
                    String searchName = nameText.getText().trim();
                    String searchCity = cityText.getText().trim();
                    if (searchName.equals("") || searchName.equals(" ")) {
                        JOptionPane.showMessageDialog(this, "Name field cannot be empty. Enter a name to search");
                        return;
                    } else {
                        BufferedReader br = new BufferedReader(new FileReader(new File(System.getProperty("user.home") + "\\Desktop\\Whitepages-scraper\\proxy.txt")));
                        String line = br.readLine();
                        if (line == null) {
                            JOptionPane.showMessageDialog(this, "No Proxy Data available. Enter proxy rack data.. ");
                        } else {

                            // scrape using proxy rack
                            searchByName = new SearchByName(searchName.trim().replaceAll(" ", "-"), searchCity.trim().replaceAll(" ", "-"), 0, factory);
                            executor.execute(searchByName);
                        }
                        br.close();
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                    showDataButton.setEnabled(true);
                    deleteDataButton.setEnabled(true);
                    deleteProxyButton.setEnabled(true);
                    errorLogText.append("\nSomething went wrong. Try again");
                    errorLogText.append("\nError Status : " + ex.getMessage());
                    executor.shutdownNow();
                }
            } else {
                //to scrape data using name and city field with uploaded proxy data
                ExecutorService executor = Executors.newFixedThreadPool(1);
                try {
                    String searchName = nameText.getText();
                    String searchCity = cityText.getText();
                    if (searchName.equals("") || searchName.equals(" ")) {
                        JOptionPane.showMessageDialog(this, "Name field cannot be empty. Enter a name to search");
                    } else {
                        PeopleDao dao = new PeopleDao(factory);
                        List<ProxyData> proxyList = dao.getProxyData();
                        if (proxyList == null || proxyList.isEmpty()) {
                            JOptionPane.showMessageDialog(this, "No working proxy Data available. Upload new proxies to continue.. ");
                        } else {

                            searchByName = new SearchByName(searchName.trim().replaceAll(" ", "-"), searchCity.trim().replaceAll(" ", "-"), 1, factory);
                            executor.execute(searchByName);
                        }
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                    showDataButton.setEnabled(true);
                    deleteDataButton.setEnabled(true);
                    deleteProxyButton.setEnabled(true);
                    executor.shutdownNow();
                    errorLogText.append("\nSomething went wrong. Try again");
                    errorLogText.append("\nError Status : " + ex.getMessage());
                }
            }
            //to scrape data using name and city data uploaded from file using proxy rack
        } else if (scrapeByFileRadio.isSelected()) {
            if (proxyRackRadio.isSelected()) {
                try {
                    BufferedReader br = new BufferedReader(new FileReader(new File(System.getProperty("user.home") + "\\Desktop\\Whitepages-scraper\\proxy.txt")));
                    String line = br.readLine();
                    if (line == null) {
                        JOptionPane.showMessageDialog(this, "No Proxy Data available. Enter proxy rack data.. ");
                    } else {
                        ExecutorService executor = Executors.newFixedThreadPool(3);
                        if (nameList == null || nameList.isEmpty()) {
                            JOptionPane.showMessageDialog(this, "No names found,, Upload the name file");
                            return;
                        } else if (cityList == null || cityList.isEmpty()) {
                            cityList = new ArrayList<>();
                            cityList.add("");
                        }
                        System.out.println(cityList.size());
                        for (String name : nameList) {
                            for (String city : cityList) {
                                showDataButton.setEnabled(false);
                                deleteDataButton.setEnabled(false);
                                deleteProxyButton.setEnabled(false);
                                searchByFile = new SearchByFile(name.trim().replaceAll(" ", "-"), city.trim().replaceAll(" ", "-"), 0, factory);
                                executor.execute(searchByFile);
                            }
                        }
                    }
                    br.close();
                } catch (Exception ex) {
                    ex.printStackTrace();
                    showDataButton.setEnabled(true);
                    deleteDataButton.setEnabled(true);
                    deleteProxyButton.setEnabled(true);
                    errorLogText.append("\n Exception " + ex.getMessage());
                }
                //to scrape data using name and city data uploaded from file using uploaded proxy data
            } else {
                try {
                    PeopleDao dao = new PeopleDao(factory);
                    List<ProxyData> proxyList = dao.getProxyData();
                    if (proxyList == null || proxyList.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "No working proxy Data available. Upload new proxies to continue.. ");
                    } else {
                        ExecutorService executor = Executors.newFixedThreadPool(3);
                        if (nameList == null || nameList.isEmpty()) {
                            JOptionPane.showMessageDialog(this, "No names found,, Upload the name file");
                            return;
                        } else if (cityList.isEmpty() || cityList == null) {
                            cityList = new ArrayList<>();
                            cityList.add("");
                        }
                        System.out.println(cityList.size());
                        for (String name : nameList) {
                            for (String city : cityList) {
                                showDataButton.setEnabled(false);
                                deleteDataButton.setEnabled(false);
                                deleteProxyButton.setEnabled(false);
                                searchByFile = new SearchByFile(name.trim().replaceAll(" ", "-"), city.trim().replaceAll(" ", "-"), 1, factory);
                                executor.execute(searchByFile);
                            }
                        }
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                    showDataButton.setEnabled(true);
                    deleteDataButton.setEnabled(true);
                    deleteProxyButton.setEnabled(true);
                    startScrapingButton.setEnabled(true);
                    errorLogText.append("\n" + ex.getMessage());
                }
            }
        } else {
            //to scrape all data using proxy rack
            if (proxyRackRadio.isSelected()) {
                BufferedReader br = null;
                try {
                    nameText.setEnabled(false);
                    cityText.setEnabled(false);
                    scrapeByNameRadio.setSelected(false);
                    scrapeByFileRadio.setSelected(false);
                    nameFileUploadButton.setEnabled(false);
                    cityFileUploadButton.setEnabled(false);

                    br = new BufferedReader(new FileReader(new File(System.getProperty("user.home") + "\\Desktop\\Whitepages-scraper\\proxy.txt")));
                    String line = br.readLine();
                    if (line == null) {
                        JOptionPane.showMessageDialog(this, "No Proxy Data available. Enter proxy rack data.. ");
                    } else {
                        errorLogText.append("\nScraping all data, this may take 3 to 5 minutes to show some result. Please wait");
                        ExecutorService executor = Executors.newFixedThreadPool(1);
                        startScrapingButton.setEnabled(false);
                        showDataButton.setEnabled(false);
                        deleteDataButton.setEnabled(false);
                        deleteProxyButton.setEnabled(false);
                        startAllDataCrawler = new StartAllDataCrawler(0, factory);
                        executor.execute(startAllDataCrawler);
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                    showDataButton.setEnabled(true);
                    deleteDataButton.setEnabled(true);
                    deleteProxyButton.setEnabled(true);
                    startScrapingButton.setEnabled(true);
                    errorLogText.append("\nError in getting all Data. Status : " + ex.getMessage());
                } finally {
                    try {
                        br.close();
                    } catch (IOException ex) {
                        return;
                    }
                }
                //to scrape all data using uploaded proxy data
            } else {
                try {
                    nameText.setEnabled(false);
                    cityText.setEnabled(false);
                    scrapeByNameRadio.setSelected(false);
                    scrapeByFileRadio.setSelected(false);
                    nameFileUploadButton.setEnabled(false);
                    cityFileUploadButton.setEnabled(false);

                    PeopleDao dao = new PeopleDao(factory);
                    List<ProxyData> proxyList = dao.getProxyData();
                    if (proxyList == null || proxyList.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "No working proxy Data available. Upload new proxies to continue.. ");
                    } else {
                        ExecutorService executor = Executors.newFixedThreadPool(1);
                        errorLogText.append("\nScraping all data, this may take 3 to 5 minutes to show some result. Please wait");
                        startScrapingButton.setEnabled(false);
                        showDataButton.setEnabled(false);
                        deleteDataButton.setEnabled(false);
                        deleteProxyButton.setEnabled(false);
                        startAllDataCrawler = new StartAllDataCrawler(1, factory);
                        executor.execute(startAllDataCrawler);
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                    showDataButton.setEnabled(true);
                    deleteDataButton.setEnabled(true);
                    deleteProxyButton.setEnabled(true);
                    startScrapingButton.setEnabled(true);
                    errorLogText.append("\nError in getting all Data. Status : " + ex.getMessage());
                }
            }// end of scraping all data from uploaded proxy data
        }// end of checking with type of scraping required
    }//GEN-LAST:event_startScrapingButtonActionPerformed

    private void clearLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearLogActionPerformed
        // TODO add your handling code here:
        outputText.setText(" ");
        userNameText.setText("");
        passwordText.setText("");
        proxyText.setText("");
        portText.setText("");
        nameText.setText("");
        cityText.setText("");
        errorLogText.setText(" ");
    }//GEN-LAST:event_clearLogActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        // TODO add your handling code here:
        int a = JOptionPane.showConfirmDialog(this, "Do you want to Exit???", "EXIT", 0);
        System.out.println(a);
        if (a == 0) {
            startScrapingButton.setEnabled(true);
            showDataButton.setEnabled(true);
            deleteDataButton.setEnabled(true);
            deleteProxyButton.setEnabled(true);
            if (StartAllDataCrawler.running) {
                startAllDataCrawler.stopAllThreads();
            } else if (SearchByFile.running) {
                searchByFile.stopSearchByFileThread();
            } else if (SearchByName.running) {
                searchByName.stopSearchByName();
            }
            dispose();
            System.exit(0);
        }
    }//GEN-LAST:event_exitButtonActionPerformed

    private void cityTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cityTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cityTextActionPerformed

    private void showDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showDataButtonActionPerformed
        // TODO add your handling code here:
        PeopleDao dao = new PeopleDao(factory);
        List<People> list = dao.getAllPeople();
        if (list.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Database is Empty..");
        } else {
            outputText.append("\n  Name    ||  Age    ||  Phone    ||  Address    ");
            for (People people : list) {
                outputText.append("\n" + people.getFirstname() + " " + people.getLastname() + " || " + people.getAge() + " || " + people.getLandline() + " || " + people.getStreetAddress() + " " + people.getCity() + " " + people.getState() + " " + people.getZipcode());
                outputText.append("\n---------------------------------------------------------------------------------------------");
            }
        }

    }//GEN-LAST:event_showDataButtonActionPerformed

    private void deleteDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteDataButtonActionPerformed
        // TODO add your handling code here:
        int a = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete all data", "EXIT", 0);
        System.out.println(a);
        if (a == 0) {
            PeopleDao dao = new PeopleDao(factory);
            dao.deleteAllData();
        }
    }//GEN-LAST:event_deleteDataButtonActionPerformed

    private void scrapeByNameRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scrapeByNameRadioActionPerformed
        // TODO add your handling code here:
        nameFileUploadButton.setEnabled(false);
        cityFileUploadButton.setEnabled(false);
        scrapeAllDataRadio.setSelected(false);
        scrapeByFileRadio.setSelected(false);
        scrapeByNameRadio.setSelected(true);
        startScrapingButton.setEnabled(true);
        nameText.setEnabled(true);
        cityText.setEnabled(true);

    }//GEN-LAST:event_scrapeByNameRadioActionPerformed

    private void scrapeByFileRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scrapeByFileRadioActionPerformed
        // TODO add your handling code here:
        startScrapingButton.setEnabled(false);
        nameText.setEnabled(false);
        cityText.setEnabled(false);
        scrapeByNameRadio.setSelected(false);
        scrapeAllDataRadio.setSelected(false);
        startScrapingButton.setEnabled(true);
        nameFileUploadButton.setEnabled(true);
        cityFileUploadButton.setEnabled(true);
        scrapeByFileRadio.setSelected(true);
//        nameFileText.setEnabled(true);
//        cityFileText.setEnabled(true);


    }//GEN-LAST:event_scrapeByFileRadioActionPerformed

    private void nameFileUploadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameFileUploadButtonActionPerformed
        // TODO add your handling code here:
        nameList = null;
        final JFileChooser fc = new JFileChooser();
        int returnVal = fc.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
//            nameFileText.setText(file.getAbsolutePath());
            try {
                // What to do with the file, e.g. display it in a TextArea
                FileReader fileReader = new FileReader(file.getAbsolutePath());
                BufferedReader br = new BufferedReader(fileReader);
                String line;
                outputText.append("\nYour file : " + file.getName());
                nameList = new ArrayList<>();
                outputText.append("\nName File Content");
                outputText.append("\n---------------------------");
                while ((line = br.readLine()) != null) {
                    outputText.append("\n" + line);
                    nameList.add(line);
                }
                outputText.append("\nName File Uploaded");
                outputText.append("\n---------------------------");
                br.close();
                fileReader.close();
            } catch (Exception e) {
                outputText.append("\nproblem accessing file : " + file.getAbsolutePath());
            }
        } else {
        }
    }//GEN-LAST:event_nameFileUploadButtonActionPerformed

    private void cityFileUploadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cityFileUploadButtonActionPerformed
        // TODO add your handling code here:
        cityList = null;
        final JFileChooser fc = new JFileChooser();
        int returnVal = fc.showOpenDialog(this);
        FileSystemView a = fc.getFileSystemView();

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
//            cityFileText.setText(file.getAbsolutePath());
            try {
                // What to do with the file, e.g. display it in a TextArea
                FileReader fileReader = new FileReader(file.getAbsolutePath());

                BufferedReader br = new BufferedReader(fileReader);

                String line;
                outputText.append("\nYour file : " + file.getName());
                outputText.append("\nCity File Content");
                outputText.append("\n---------------------------");
                cityList = new ArrayList<>();
                while ((line = br.readLine()) != null) {
                    cityList.add(line);
                    outputText.append("\n" + line);
                    System.out.println(line);
                }

                outputText.append("\nCity File Uploaded");
                outputText.append("\n---------------------------");
                br.close();
                fileReader.close();
            } catch (Exception e) {
                //System.out.println("problem accessing file"+file.getAbsolutePath());
            }
        } else {
            //log.append("Open command cancelled by user." + newline);
        }
    }//GEN-LAST:event_cityFileUploadButtonActionPerformed

    private void scrapeAllDataRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scrapeAllDataRadioActionPerformed
        nameText.setEnabled(false);
        cityText.setEnabled(false);
        startScrapingButton.setEnabled(true);
        scrapeByNameRadio.setSelected(false);
        scrapeByFileRadio.setSelected(false);
        nameFileUploadButton.setEnabled(false);
        cityFileUploadButton.setEnabled(false);
    }//GEN-LAST:event_scrapeAllDataRadioActionPerformed

    private void uploadProxyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadProxyButtonActionPerformed
        // TODO add your handling code here:
        final JFileChooser fc = new JFileChooser();
        int returnVal = fc.showOpenDialog(this);
        FileSystemView a = fc.getFileSystemView();

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            System.out.println("Selected file: " + file.getAbsolutePath());
            proxyFileText.setText(file.getAbsolutePath());
            try {
                FileReader fileReader = new FileReader(file.getAbsolutePath());
                BufferedReader br = new BufferedReader(fileReader);

                String line;
                PeopleDao dao = new PeopleDao(factory);
                List<ProxyData> proxyList = new ArrayList<>();
                while ((line = br.readLine()) != null) {
                    System.out.println(line);
                    ProxyData proxyData = new ProxyData();
                    String[] splitLine = line.split(":");
                    switch (splitLine.length) {
                        case 4:
                            proxyData.setIp(splitLine[0]);
                            proxyData.setPort(Integer.parseInt(splitLine[1].replaceAll("[^0-9]", "")));
                            proxyData.setUserName(splitLine[2]);
                            proxyData.setPassword(splitLine[3]);
                            proxyData.setWorking(1);
                            proxyList.add(proxyData);
                            break;
                        case 2:
                            proxyData.setIp(splitLine[0]);
                            proxyData.setPort(Integer.parseInt(splitLine[1].replaceAll("[^0-9]", "")));
                            proxyData.setUserName("");
                            proxyData.setPassword("");
                            proxyData.setWorking(1);
                            proxyList.add(proxyData);
                            break;
                        default:
                            break;
                    }
                }
                outputText.append("\nPlease wait. This may take some time.");
                dao.saveProxyData(proxyList);
                br.close();
                fileReader.close();
                JOptionPane.showMessageDialog(this, "\nProxy data uploaded...");
            } catch (Exception e) {
                errorLogText.append("Error in Uploading proxy file. Please try again..");
            }
        } else {
            //log.append("Open command cancelled by user." + newline);
        }
    }//GEN-LAST:event_uploadProxyButtonActionPerformed

    private void proxyFileTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proxyFileTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_proxyFileTextActionPerformed

    private void saveProxyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveProxyButtonActionPerformed
        // TODO add your handling code here:
        // What to do with the file, e.g. display it in a TextArea
        String ip = proxyText.getText().trim();
        String proxyUserName = userNameText.getText();
        String proxyPassword = passwordText.getText();

        if (ip.equals("")) {
            JOptionPane.showMessageDialog(this, "Proxy field cannot be empty");
        } else if (portText.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Port field cannot be empty");
        } else if (proxyUserName.equals("")) {
            JOptionPane.showMessageDialog(this, "Proxy User Name field cannot be empty");
        } else if (proxyPassword.equals("")) {
            JOptionPane.showMessageDialog(this, "Proxy Password field cannot be empty");
        } else {
            String IPADDRESS_PATTERN = "^([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\."
                    + "([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\."
                    + "([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\."
                    + "([01]?\\d\\d?|2[0-4]\\d|25[0-5])$";
            Pattern pattern = Pattern.compile(IPADDRESS_PATTERN);
            Matcher matcher = pattern.matcher(ip);
            boolean validIp = matcher.matches();
            String portRegEx = "[0-9]+";
            if (!validIp) {
                JOptionPane.showMessageDialog(this, "Invalid Ip.. Please enter a valid proxy Ip.");
            } else if (!(portText.getText().matches(portRegEx))) {
                JOptionPane.showMessageDialog(this, "Invalid port number, enter a valid port number..");
            } else {
                FileWriter writer = null;
                try {
                    int port = 0;
                    try {
                        port = Integer.parseInt(portText.getText());
                    } catch (NumberFormatException e) {
                        port = 1607;
                    }
                    String proxyDetails = ip + ":" + port + ":" + proxyUserName + ":" + proxyPassword;
                    File file = new File(System.getProperty("user.home") + "\\Desktop\\Whitepages-scraper\\proxy.txt");
                    PrintWriter printWriter = new PrintWriter(file);
                    printWriter.print("");
                    printWriter.close();
                    writer = new FileWriter(file);
                    writer.write(proxyDetails);
                    writer.flush();
                    JOptionPane.showMessageDialog(this, "Proxy data saved successfully..");
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this, "Couldnt save proxy data, please try again.");
                } finally {
                    try {
                        writer.close();
                    } catch (IOException ex) {
                    }
                }
            }
        }
    }//GEN-LAST:event_saveProxyButtonActionPerformed

    private void proxyRackRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proxyRackRadioActionPerformed
        // TODO add your handling code here:
        proxyFileRadio.setSelected(false);
        proxyRackRadio.setSelected(true);
        uploadProxyPanel.setEnabled(false);
        proxyRackPanel.setEnabled(true);

        uploadProxyButton.setEnabled(false);
        proxyFileText.setEnabled(false);

        saveProxyButton.setEnabled(true);
        proxyText.setEnabled(true);
        userNameText.setEnabled(true);
        portText.setEnabled(true);
        passwordText.setEnabled(true);
    }//GEN-LAST:event_proxyRackRadioActionPerformed

    private void proxyFileRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proxyFileRadioActionPerformed
        // TODO add your handling code here:
        proxyRackRadio.setSelected(false);
        proxyFileRadio.setSelected(true);
        uploadProxyPanel.setEnabled(true);
        proxyRackPanel.setEnabled(false);

        uploadProxyButton.setEnabled(true);
        proxyFileText.setEnabled(true);

        saveProxyButton.setEnabled(false);
        proxyText.setEnabled(false);
        userNameText.setEnabled(false);
        portText.setEnabled(false);
        passwordText.setEnabled(false);
    }//GEN-LAST:event_proxyFileRadioActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        startScrapingButton.setEnabled(true);
        showDataButton.setEnabled(true);
        deleteDataButton.setEnabled(true);
        deleteProxyButton.setEnabled(true);
        if (StartAllDataCrawler.running) {
            startAllDataCrawler.stopAllThreads();
        } else if (SearchByFile.running) {
            searchByFile.stopSearchByFileThread();
        } else if (SearchByName.running) {
            searchByName.stopSearchByName();
        }

    }//GEN-LAST:event_stopButtonActionPerformed

    private void deleteProxyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteProxyButtonActionPerformed
        // TODO add your handling code here:
        PeopleDao dao = new PeopleDao(factory);
        int a = JOptionPane.showConfirmDialog(this, "This will delete all non working proxies, proceed?", "EXIT", 0);
        if (a == 0) {
            dao.deleteNonWorkingProxies();
        }
    }//GEN-LAST:event_deleteProxyButtonActionPerformed

    private void nameTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameTextActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
//        String url1 = "http://licensing.facedominator.com/licensing/FD/Datetime.php";
//        try {
//            String expiryString = "2016-04-27 23:59:59";
//            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
//            Date expiryDate = format.parse(expiryString);
//            Date serverDate = null;
//            URL url = new URL(url1);
//            String serverString = doGetRequest(url).trim();
//            serverDate = format.parse(serverString);
//
//            if (serverDate.after(expiryDate)) {
//                JOptionPane.showMessageDialog(null, "Your trial period for whitepages has expired.");
//                System.exit(0);
//            }
//        } catch (Exception ex) {
//            ex.printStackTrace();
//        }

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WhitepagesGui.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WhitepagesGui.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WhitepagesGui.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WhitepagesGui.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new WhitepagesGui().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cityFileUploadButton;
    private javax.swing.JLabel cityLabel;
    private javax.swing.JTextField cityText;
    private javax.swing.JButton clearLog;
    private javax.swing.JButton deleteDataButton;
    private javax.swing.JButton deleteProxyButton;
    public static java.awt.TextArea errorLogText;
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel headerImage;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel nameCityPanel;
    private javax.swing.JButton nameFileUploadButton;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameText;
    public static java.awt.TextArea outputText;
    private javax.swing.JPasswordField passwordText;
    private javax.swing.JTextField portText;
    private javax.swing.JRadioButton proxyFileRadio;
    private javax.swing.JTextField proxyFileText;
    private javax.swing.JPanel proxyRackPanel;
    private javax.swing.JRadioButton proxyRackRadio;
    private javax.swing.JTextField proxyText;
    private javax.swing.JButton saveProxyButton;
    private javax.swing.JRadioButton scrapeAllDataRadio;
    private javax.swing.JRadioButton scrapeByFileRadio;
    private javax.swing.JRadioButton scrapeByNameRadio;
    private javax.swing.JButton showDataButton;
    private javax.swing.JButton startScrapingButton;
    private javax.swing.JButton stopButton;
    private javax.swing.JButton uploadProxyButton;
    private javax.swing.JPanel uploadProxyPanel;
    private javax.swing.JTextField userNameText;
    // End of variables declaration//GEN-END:variables
}
